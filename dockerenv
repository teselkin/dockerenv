#!/bin/bash
set -o errexit

if [[ "$1" == '-d' ]]; then
  set -o xtrace
  shift
fi

if [ -f "${HOME}/.dockerenvrc" ]; then
  source "${HOME}/.dockerenvrc"
fi


say() {
  echo "$@"
}

die() {
  cat << EOF
FAILED
****************************************
$@
****************************************
EOF
  exit 1
}

call() {
  if $simulate; then
    say "$@"
  else
    say "Running command:"
    say "$@"
    eval "$@"
  fi
}

run_hooks() {
  local cid=$1
  local hook=$2
  local hooks=${TEMPLATES_DIR}/${template}/hooks
  local ofile
  if [[ -d ${hooks}/${hook} ]]; then
    ofile=$(mktemp)
    cat << 'EOF' > ${ofile}
#!/bin/bash -x
workdir=$(mktemp -d)
tar -xzf ${0}.tar.gz -C ${workdir}
run-parts --verbose ${workdir}
rm -rf ${workdir}
rm ${0}*
EOF
    tar -czf ${ofile}.tar.gz -C ${hooks}/${hook} .
    call docker cp ${ofile} ${cid}:${ofile}
    call docker cp ${ofile}.tar.gz ${cid}:${ofile}.tar.gz
    call docker exec --tty --privileged --user 0 ${cid} \
      /bin/bash ${ofile}
    rm ${ofile}
    rm ${ofile}.tar.gz
  else
    return 1
  fi
}


create_and_start() {
  unset RETVAL
  local cid=
  local tmpfile=$(mktemp)

  # Create and start new container
  call docker create \
    --cidfile=${tmpfile}.cid \
    --interactive \
    --tty \
    --privileged \
    --volume ${workspace}:/workspace:rw \
    --volume ${HOME}/.ssh:${HOME}/.ssh:ro \
    --volume ${tmpdir}/tmp:/tmp:rw \
    --user $(id -u):$(id -g) \
    ${create_opts} \
    ${image} ${env_cmd}

  if [ -f "${tmpfile}".cid ]; then
    cid=$(cat ${tmpfile}.cid)
  fi

  rm -f ${tmpfile} || true
  rm -f ${tmpfile}.cid || true

  if [[ -z "${cid}" ]]; then
    die "cidfile '${tmpfile}.cid' not found after 'docker create'"
  else
    call docker start ${cid}
  fi

  RETVAL=${cid}
}

if [ -z "${BASE_DIR}" ]; then
  BASE_DIR=$(readlink -f $0)
  BASE_DIR=${BASE_DIR%/*}
fi

TEMPLATES_DIR=${BASE_DIR}/templates
INCLUDE_DIR=${BASE_DIR}/include


force=false
no_cache=false
rebuild=false
simulate=false
update=false
update_only=false
template='ubuntu:latest'
workspace=$PWD
env_cmd='bash'
create_opts=''


while [ -n "$1" ]; do
  case $1 in
    -f|--force)
      force=true
      shift
    ;;
    -N|--no-cache)
      no_cache=true
      shift
    ;;
    -o|--create-opts)
      create_opts="${create_opts} $2"
      shift 2
    ;;
    -R|--rebuild)
      rebuild=true
      no_cache=true
      shift
    ;;
    -s|--simulate)
      simulate=true
      shift
    ;;
    -t|--template)
      template=$2
      shift 2
    ;;
    -u|--update)
      update=true
      shift
    ;;
    -U|--update-only)
      update=true
      update_only=true
      shift
    ;;
    -w|--workspace)
      workspace=$2
      shift 2
    ;;
    -W|--no-workspace)
      workspace=''
      shift
    ;;
    *)
      env_cmd="$@"
      shift $#
    ;;
  esac
done


build_opts=''
if ${no_cache}; then
  build_opts+='  --no-cache'
fi


if [ -d "${TEMPLATES_DIR}/${template}" ]; then
  image=${template}:latest

  do_build=false
  if [ -z "$(docker images --quiet ${image})" ]; then
    say "Image '${image}' not found"
    do_build=true
  fi

  if $rebuild; then
    do_build=true
  fi

  if $do_build; then
    pushd ${TEMPLATES_DIR}/${template}
    say "Building new image '${image}'"
    if [ -f "Dockerfile.m4" ]; then
      say "Dockerfile.m4 found, running preprocessor ..."
      m4 \
        --fatal-warnings \
        --include=${INCLUDE_DIR} \
        Dockerfile.m4 | tee Dockerfile.tmp > /dev/null
      if [ ${PIPESTATUS[0]} -ne 0 ]; then
        die "m4 failed"
      else
        mv Dockerfile.tmp Dockerfile
      fi
    fi
    call docker build \
      --rm \
      --build-arg username=${USER} \
      --build-arg idstring="'$(id)'" \
      --tag ${image} \
      ${build_opts} .

    popd
  fi
else
  image=${template}
fi


tmpdir=$(mktemp -d /tmp/dockerenv.${image//:/-}.XXXXXXXX)
say "Temp mount point is at '${tmpdir}'"

mkdir -p ${tmpdir}/tmp

if [ -z "${workspace}" ]; then
  workspace=${tmpdir}/workspace
  mkdir -p ${workspace}
fi

create_and_start
cid=${RETVAL}

commit_changes=false

# Run post-build actions
if ${do_build}; then
  say "Running post-build hooks ..."
  if run_hooks ${cid} post-build; then
    commit_changes=true
  fi
fi

# Update container and commit
if $update; then
  say "Running update hooks before attaching session ..."
  if run_hooks ${cid} update; then
    commit_changes=true
  fi
fi

if $commit_changes; then
  tarfile=$(mktemp)
  changes=$(awk 'BEGIN{s="\"\""};'\
'/(CMD|ENTRYPOINT|ENV|EXPOSE|ONBUILD|USER|VOLUME|WORKDIR)/'\
'{s=s ",\"" $0 "\""};END{print s}' ${TEMPLATES_DIR}/${template}/Dockerfile)

  call docker commit ${cid} ${image}
  call docker stop ${cid}
  call docker export -o ${tarfile}.tar.gz ${cid}
  call docker import --change ${changes} ${tarfile}.tar.gz ${image}
  call docker rm ${cid}

  create_and_start
  cid=${RETVAL}
fi


# Attach session, remove container before exiting the script
call docker attach ${cid}
call docker rm ${cid}

