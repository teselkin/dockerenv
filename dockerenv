#!/bin/bash

set -o errexit
#set -o xtrace


if [ -f "${HOME}/.dockerenvrc" ]; then
  source "${HOME}/.dockerenvrc"
fi


say() {
  echo "$@"
}

die() {
  cat << EOF
FAILED
****************************************
$@
****************************************
EOF
  exit 1
}

call() {
  if $simulate; then
    say "$@"
  else
    say "Running command:"
    say "$@"
    eval "$@"
  fi
}


if [ -z "${BASE_DIR}" ]; then
  BASE_DIR=$(readlink -f $0)
  BASE_DIR=${BASE_DIR%/*}
fi

TEMPLATES_DIR=${BASE_DIR}/templates
INCLUDE_DIR=${BASE_DIR}/include


force=false
no_cache=false
rebuild=false
simulate=false
update=false
update_only=false
template='ubuntu:latest'
workspace=$PWD
env_cmd='bash'
create_opts=''


while [ -n "$1" ]; do
  case $1 in
    -f|--force)
      force=true
      shift
    ;;
    -N|--no-cache)
      no_cache=true
      shift
    ;;
    -o|--create-opts)
      create_opts="${create_opts} $2"
      shift 2
    ;;
    -R|--rebuild)
      rebuild=true
      no_cache=true
      shift
    ;;
    -s|--simulate)
      simulate=true
      shift
    ;;
    -t|--template)
      template=$2
      shift 2
    ;;
    -u|--update)
      update=true
      shift
    ;;
    -U|--update-only)
      update=true
      update_only=true
      shift
    ;;
    -w|--workspace)
      workspace=$2
      shift 2
    ;;
    -W|--no-workspace)
      workspace=''
      shift
    ;;
    *)
      env_cmd="$@"
      shift $#
    ;;
  esac
done


build_opts=''
if ${no_cache}; then
  build_opts+='  --no-cache'
fi


if [ -d "${TEMPLATES_DIR}/${template}" ]; then
  image=${template}:latest

  do_build=false
  if [ -z "$(docker images --quiet ${image})" ]; then
    say "Image '${image}' not found"
    do_build=true
  fi

  if $rebuild; then
    do_build=true
  fi

  if $do_build; then
    pushd ${TEMPLATES_DIR}/${template}
    say "Building new image '${image}'"
    if [ -f "Dockerfile.m4" ]; then
      say "Dockerfile.m4 found, running preprocessor ..."
      m4 \
        --fatal-warnings \
        --include=${INCLUDE_DIR} \
        Dockerfile.m4 | tee Dockerfile.tmp > /dev/null
      if [ ${PIPESTATUS[0]} -ne 0 ]; then
        die "m4 failed"
      else
        mv Dockerfile.tmp Dockerfile
      fi
    fi
    call docker build \
      --rm \
      --build-arg username=${USER} \
      --build-arg idstring="'$(id)'" \
      --tag ${image} \
      ${build_opts} .

    popd
  fi
else
  image=${template}
fi


cidfile=$(mktemp)
if [ -f "${cidfile}" ]; then
  rm -f ${cidfile}
else
  die "Unable to create cidfile ${cidfile}"
fi

tmpdir=$(mktemp -d /tmp/dockerenv.${image//:/-}.XXXXXXXX)
say "Temp mount point is at '${tmpdir}'"

mkdir -p ${tmpdir}/tmp

if [ -z "${workspace}" ]; then
  workspace=${tmpdir}/workspace
  mkdir -p ${workspace}
fi


# Create and start new container
call docker create \
  --cidfile=${cidfile} \
  --interactive \
  --tty \
  --privileged \
  --volume ${workspace}:/workspace:rw \
  --volume ${HOME}/.ssh:${HOME}/.ssh:ro \
  --volume ${tmpdir}/tmp:/tmp:rw \
  --user $(id -u):$(id -g) \
  ${create_opts} \
  ${image} ${env_cmd}

if [ -f "${cidfile}" ]; then
  cid=$(cat ${cidfile})
else
  die "cidfile '${cidfile}' not found after 'docker create'"
fi

call docker start ${cid}


# Update container and commit
if $update; then
  say "Updating container before attaching session"
  update_scripts=${TEMPLATES_DIR}/${template}/hooks/update
  if [ -d "${update_scripts}" ]; then
    mkdir -p ${tmpdir}/tmp/hooks
    cp -r ${update_scripts} ${tmpdir}/tmp/hooks/

    call docker exec \
      --tty \
      --privileged \
      ${cid} \
      /bin/bash /tmp/hooks/update/run.sh

    call docker commit \
      ${cid} \
      ${image}

    if $update_only; then
      call docker stop ${cid}
      call docker rm ${cid}
      exit 0
    fi
  else
    say "Update scripts not found, skipping update"
  fi
fi


# Attach session, remove container before exiting the script
call docker attach ${cid}
call docker rm ${cid}

