#!/bin/bash

set -o errexit

logfile=$(mktemp)

if [[ "$1" =~ \-d|\-\-debug ]]; then
  shift
  #exec 4>/tmp/xtrace.log
  #export BASH_XTRACEFD=4
  exec &> >(tee -a /tmp/debug.log)
  set -o xtrace
else
  exec &> >(tee ${logfile})
fi

cleanup(){
  sudo umount ${BUILDDIR}/mnt/iso || true
  chroot_destroy || true
}
trap cleanup EXIT

echo "Running $0 $@"
echo ''

# ==== Functions begin here =====
# ===============================

usage(){
  cat << EOF

mk-updates-tarball

  Script to download rpm packages, create repository and compress into tar.gz file.
  Packages names can be stored in a file or passed as command line arguments.

  The script generates two log files in /tmp directory - xtrace.log and debug.log.

  Resulting tarball named updates.tar.gz will be copied to /workspace directory.

Usage:

  mk-updates-tarball [-h] [-f <filename>] [package [package]]

  -h|--help - show this message and exit
  -f|--file - download packages listed in a file

EOF
}


die(){
  cat << EOF
***** ***** *****
$@
***** ***** *****
EOF
  exit 1
}


say(){
  echo "$@"
}


pushd() {
  command pushd "$@" > /dev/null
}


popd() {
  command popd "$@" > /dev/null
}


chroot_setup() {
  mkdir -p ${BUILDDIR}/etc
  rpm --rebuilddb --root=${BUILDDIR}
  sudo yum --installroot=${BUILDDIR} \
    --config=${BUILDDIR}/tmp/yum.conf.d/yum.conf \
    --nogpgcheck \
    install -y yum yum-utils
  sudo mount --bind /proc ${BUILDDIR}/proc
  sudo mount --bind /dev ${BUILDDIR}/dev
  sudo cp /etc/resolv.conf ${BUILDDIR}/etc/resolv.conf

  sudo rm ${BUILDDIR}/var/lib/rpm/__db* || true
  chroot_cmd rpm --rebuilddb
  #chroot_cmd yum update -y
}


chroot_cmd() {
  sudo chroot ${BUILDDIR} "$@"
}


chroot_destroy() {
  mount | grep "${BUILDDIR}" | cut -d' ' -f3 \
    | xargs -I {} sudo umount {}
  #rm -rf ${BUILDDIR}
}


apply_blacklist() {
  local ifile="$1"
  shift

  for name in $@; do
    if [[ ! -f "${BLACKLIST}.${name}.sed" ]]; then
      build_blacklist
    fi
  done

  if [[ -f "${ifile}" ]]; then
    # Drop empty lines
    sed -i -r '/^[[:space:]]*$/d' ${ifile}
    # Apply blacklists
    for name in $@; do
      if [[ "${name}" == 'devel' ]]; then
        continue
      fi
      sed -r -i -f "${BLACKLIST}.${name}.sed" ${ifile}
    done
  fi
}


build_blacklist() {
  # Generate sed template file from blacklist
  # Remove blacklisted packages from list of available packages
  if [[ -z "${blacklist_replace}" ]]; then
    if [[ -f ${CONFIG_DIR}/${RELEASE}/blacklist ]]; then
      cat ${CONFIG_DIR}/${RELEASE}/blacklist >> ${BLACKLIST}
    fi
  else
    if [[ -f "${blacklist_replace}" ]]; then
      cat "${blacklist_replace}" >> ${BLACKLIST}
    fi
  fi
  if [[ -n "${blacklist_append}" ]]; then
    if [[ -f "${blacklist_append}" ]]; then
      cat "${blacklist_append}" >> ${BLACKLIST}
    fi
  fi

  # First of all, ignore devel packages
  cat << EOF > ${BLACKLIST}.devel.sed
/-devel[[:space:]\.-]/d
/-devel$/d
EOF

  # Convert blacklist to regexp (name only)
  awk '/^[[:space:]]*#/{next};{print "/^" $0 "$/d"}' \
    ${BLACKLIST} > ${BLACKLIST}.name.sed

  # Convert blacklist to regexp (name and arch)
  awk '/^[[:space:]]*#/{next};{print "/^" $0 "\\.(noarch|i.86|x86_64)$/d"}' \
    ${BLACKLIST} > ${BLACKLIST}.name_arch.sed
}


merge_lists() {
  unset RETVAL
  local ofile=$(mktemp)
  cat "$@" | sort -u > ${ofile}
  RETVAL=${ofile}
}


get_upstream_packages() {
  local ofile="$1"
  shift

  local repos=
  while [[ -n "$1" ]]; do
    repos="${repos} --enablerepo=${1}"
    shift
  done
  if [[ -n "${repos}" ]]; then
    repos="--disablerepo=* ${repos}"
  fi

  >${ofile}
  chroot_cmd repoquery --all --qf '%{name} %{vendor}' ${repos} \
    | awk 'BEGIN{IGNORECASE=1};/ (centos$|fedora|red hat)/{print $1}' \
    >> ${ofile}
  chroot_cmd repoquery --all --qf '%{name} %{buildhost}' ${repos} \
    | awk '$2 ~/centos\.org/{print $1}' \
    >> ${ofile}
  sort -u -o ${ofile} ${ofile}
}


get_updated_packages() {
  local upstream_pkgs="$1"
  local pkgs="$2"
  shift 2

  cat ${upstream_pkgs} > ${pkgs}.upstream
  apply_blacklist ${pkgs}.upstream devel name

  local repoid=
  local no_upstream_repos=
  for repoid in base updates extras; do
    no_upstream_repos="--disablerepo=${repoid} ${no_upstream_repos}"
  done

  >${pkgs}.mos
  while read name; do
    echo "${name}"
    >${pkgs}.1
    chroot_cmd repoquery --show-duplicates \
      --qf '%{name} %{nevra} %{repoid}' ${name} > ${pkgs}.1
    while read line; do
      echo " - ${line}"
    done < ${pkgs}.1
    latest=$(cat ${pkgs}.1 | awk '{print $2}' | rpmdev-sort | tail -1)
    echo " * ${latest}"
    update_pkg=true
    cat ${pkgs}.1 \
    | awk -v v=${latest} '{if (v == $2){print $3}}' \
    | while read repoid; do
      if [[ "${repoid}" =~ ^(mos\-.*|local)$ ]]; then
        update_pkg=false
      fi
    done
    echo " ** Update: ${update_pkg}"
    if ${update_pkg}; then
      cat ${pkgs}.1 | awk -v v=${latest} '{if (v == $2){print $1;exit}}' >> ${pkgs}
    fi
    echo ""
  done < ${pkgs}.upstream
}


rebuild_local_repo() {
  echo "=== Rebuilding local repo ==="

  pushd ${BUILDDIR}/tmp/local.repo.d
  if [[ -d repodata ]]; then
    rm -rf repodata
  fi
  createrepo .
  popd

  cat << EOF | sudo tee ${BUILDDIR}/etc/yum.repos.d/local.repo
[local]
name=Local Repo
baseurl=file:///tmp/local.repo.d
enabled=1
gpgcheck=0
EOF

  chroot_cmd yum makecache
  echo 'Done'
  echo ''
}


resolve_names() {
  unset RETVAL

  local pkgs=$(mktemp)
  local name
  local pkg_name
  local s
  local line
  local result
  local last_name

  echo '=== Resolving packages names ==='

  if [[ -f "$1" ]]; then
    cp "${1}" ${pkgs}.in
  else
    RETVAL=${pkgs}
    return
  fi

  last_name=""
  while read line; do
    name=${line%% *}
    if [[ "${name}" != "${last_name}" ]]; then
      last_name=${name}
      >${pkgs}.1
      if ! [[ "${name}" =~ [\(\)\/] ]]; then
        pkg_name=${name}
        while [[ -n "${pkg_name}" ]]; do
          >${pkgs}.1
          chroot_cmd repoquery --archlist x86_64,noarch \
            --qf '%{nevra}' ${pkg_name} > ${pkgs}.1
          sed -r -i '/^[[:blank:]]*$/d' ${pkgs}.1
          if [[ $(cat ${pkgs}.1 | wc -l) -eq 0 ]]; then
            chroot_cmd repoquery --archlist x86_64,noarch,i686 \
              --qf '%{nevra}' ${pkg_name} > ${pkgs}.1
            sed -r -i '/^[[:blank:]]*$/d' ${pkgs}.1
          fi
          if [[ $(cat ${pkgs}.1 | wc -l) -gt 0 ]]; then
            pkg_name=
          else
            if [[ "${pkg_name}" =~ \. ]]; then
              pkg_name=${pkg_name%.*}
            else
              pkg_name=
            fi
          fi
        done
      fi
      if [[ $(cat ${pkgs}.1 | wc -l) -eq 0 ]]; then
        chroot_cmd repoquery --archlist x86_64,noarch \
          --qf '%{nevra}' --whatprovides ${name} > ${pkgs}.1
        sed -r -i '/^[[:blank:]]*$/d' ${pkgs}.1
      fi
      if [[ $(cat ${pkgs}.1 | wc -l) -eq 0 ]]; then
        chroot_cmd repoquery --archlist x86_64,noarch,i686 \
          --qf '%{nevra}' --whatprovides ${name} > ${pkgs}.1
        sed -r -i '/^[[:blank:]]*$/d' ${pkgs}.1
      fi

      local result=$(cat ${pkgs}.1 | rpmdev-sort | tail -1)
    fi

    echo " * ${name}"
    while read s; do
      echo "  - ${s}"
    done < ${pkgs}.1

    echo "  ** ${result}"
    echo "${result}" >> ${pkgs}
    echo "${result} ${line}" >> ${pkgs}.deplist

  done < ${pkgs}.in

  echo ''
  RETVAL=${pkgs}
}


resolve_srpm_packages() {
  unset RETVAL

  local pkgs=$(mktemp)
  local name
  local line
  local srpm_name

  echo '=== Resolving packages by SRPM ==='

  cp ${1} ${pkgs}.in
  chroot_cmd repoquery --all --qf '%{sourcerpm} %{nevra}' > ${pkgs}.map
  while read name; do
    >${pkgs}.1
    srpm_name=$(awk -v s=${name} '{if($2==s){print $1;exit}}' ${pkgs}.map)
    awk -v s=${srpm_name} '{if($1==s){print $2}}' ${pkgs}.map > ${pkgs}.1
    echo " * ${name}"
    while read line; do
      echo "  - ${line}"
    done < ${pkgs}.1
    >${pkgs}.2
    while read line; do
      if [[ "${line}" =~ \.i686$ ]]; then
        local s=$(echo ${line%.i686} | sed 's/\([()+]\)/\\\1/g')
        if grep -q -E "${s}\.(x86_64|noarch)" ${pkgs}.1; then
          grep -E "${s}\.(x86_64|noarch)" ${pkgs}.1 >> ${pkgs}.2
        else
          echo "${line}" >> ${pkgs}.2
        fi
      else
        echo "${line}" >> ${pkgs}.2
      fi
    done < ${pkgs}.1
    apply_blacklist ${pkgs}.2 devel
    #sed -i -r '/-devel[[:space:]\.-]?/d' ${pkgs}.2
    echo "${name}" >> ${pkgs}.2
    sort -u -o ${pkgs}.2 ${pkgs}.2
    while read line; do
      echo "  + ${line}"
    done < ${pkgs}.2
    cat ${pkgs}.2 >> ${pkgs}
  done < ${pkgs}.in
  sort -u -o ${pkgs} ${pkgs}

  rm ${pkgs}.1
  rm ${pkgs}.2

  echo ''
  RETVAL=${pkgs}
}


download_packages() {
  local ifile=$1

  echo "=== Downloading packages ==="

  sed -i -r '/^[[:space:]]*$/d' ${ifile}
  # Do not download devel packages, they are not needed
  #   but resolving dependencies for them dramatically increases
  #   number of packages for download.
  #sed -i -r '/-devel[[:space:]\.$-]/d' ${ifile}

  while read name; do
    echo "* ${name}"
    chroot_cmd repoquery --qf '%{repoid} %{nevra}' ${name}
    chroot_cmd yumdownloader --destdir /tmp/local.repo.d/Packages --urls ${name}
    chroot_cmd yumdownloader --destdir /tmp/local.repo.d/Packages ${name}
  done < ${ifile}

  echo 'Done'
  echo ''
}


verify_repo_integrity() {
  deplist_test "$@"
}


deplist_test() {
  unset RETVAL

  local deplist_parser=$(mktemp)
  local list_available_parser=$(mktemp)
  local blacklist=$(mktemp)
  local pkgs=$(mktemp)

  local repos=
  while [[ -n "$1" ]]; do
    case "$1" in
    -l|--list)
      cat ${2} > ${pkgs}.list
      shift
    ;;
    *)
      repos="${repos} --enablerepo=${1}"
    ;;
    esac
    shift
  done

  if [[ -n "${repos}" ]]; then
    repos="--disablerepo=* ${repos}"
  fi

  cat << "EOF" > ${deplist_parser}
BEGIN {
  p = ""
  n = ""
  v = ""
}
/^package\:/ {
  p = $2
  v = $3
  next
}
/^[[:space:]]+dependency\:/ {
  n = $2
  next
}
/Unsatisfied dependency/ {
  print n " " p "-" v >> ofile ".deplist"
  printf "."
}
EOF

  if [[ ! -f ${pkgs}.list ]]; then
    chroot_cmd repoquery --all --qf="%{name}.%{arch}" ${repos} > ${pkgs}.list
  fi

  apply_blacklist ${pkgs}.list devel name_arch

  # Find unsatisfied dependencies
  sort -u -o ${pkgs}.list ${pkgs}.list
  awk '{if(c++ < 100){s=s " " $0}else{print s;c=0;s=""}};END{print s}' \
    ${pkgs}.list > ${pkgs}.chunks
  while read line; do
    chroot_cmd yum ${repos} deplist ${line} | awk -f ${deplist_parser} -v ofile=${pkgs}
  done < ${pkgs}.chunks

  if [[ ! -f "${pkgs}.deplist" ]]; then
    RETVAL=${pkgs}
    return
  fi

  echo ''
  echo ''
  sort -u -o ${pkgs}.deplist ${pkgs}.deplist
  resolve_names ${pkgs}.deplist
  apply_blacklist ${RETVAL}.deplist devel name_arch
  >${pkgs}
  local f1 f2 f3
  while read f1 f2 f3; do
    echo " * ${f3} --> ${f1} (${f2})"
    echo ${f1} >> ${pkgs}
    echo ${f3} >> ${pkgs}.broken
  done < ${RETVAL}.deplist
  unset RETVAL

  sort -u -o ${pkgs} ${pkgs}
  if [ -f ${pkgs}.broken ]; then
    sort -u -o ${pkgs}.broken ${pkgs}.broken
  fi

  if [[ $(cat ${pkgs} | wc -l) -gt 0 ]]; then
    RETVAL=${pkgs}
    return 1
  fi
}


install_test() {
  unset RETVAL

  local get_latest_packages=$(mktemp)
  local python_parser=$(mktemp)
  local list_available_parser=$(mktemp)
  local blacklist=$(mktemp)
  local pkgs=$(mktemp)

  local repos=
  while [[ -n "$1" ]]; do
    case "$1" in
    -l|--list)
      cat ${2} > ${pkgs}.list
      shift
    ;;
    *)
      repos="${repos} --enablerepo=${1}"
    ;;
    esac
    shift
  done

  if [[ -n "${repos}" ]]; then
    repos="--disablerepo=* ${repos}"
  fi

  cat << "EOF" > ${get_latest_packages}
$2 ~ /(local|mos-.*)/ {
  print $1 >> ofile ".mos"
  next
}
// {
  print $1 >> ofile ".centos"
  next
}
EOF

  cat << 'EOF' > ${python_parser}
from rpmUtils.miscutils import splitFilename
import re
import sys
re_error_package = re.compile(r'^Error\:\s+Package\:\s+(.+)\s+\((.*)\)$')
re_requires = re.compile(r'^Requires\:(.*)$')
re_available = re.compile(r'Available:\s+(.*)$')
re_available_version = re.compile(r'^(.*)\s+[<>=]+\s+(.*)$')
pkg = None
pkgs = []
for line in sys.stdin:
    line = line.strip()
    m = re_error_package.match(line)
    if m:
        if pkg:
            pkgs.append(pkg)
        keys = ('name', 'version', 'release', 'epoch', 'arch')
        pkg = {
            'package': dict(zip(keys, splitFilename(m.group(1)))),
            'requires': {},
            'available': {}
        }
        continue
    if pkg is None:
        continue
    m = re_requires.match(line)
    if m:
        a = re.split('\s+[<>=]+\s+', m.group(1) + ' = ')
        pkg['requires'] = {
            'name': a[0].strip(),
            'version': a[1].strip()
        }
        continue
    m = re_available_version.match(line)
    if m:
        pkg['available'].setdefault(m.group(1).strip(), []).append(m.group(2).strip())
        continue

ofile = open(sys.argv[1], 'a')
for item in pkgs:
#    print item
    name = item['package']['name']
    req_name = item['requires']['name']
    req_version = item['requires']['version']
    if req_version not in item['available'].get(req_name, []):
        ofile.write('{} {}\n'.format(req_name, name))
ofile.close()
EOF

  if [[ ! -f ${pkgs}.list ]]; then
    chroot_cmd repoquery --all --qf="%{name}.%{arch}" ${repos} > ${pkgs}.list
  fi

  apply_blacklist ${pkgs}.list devel name_arch

  # Find unsatisfied dependencies
  sort -u -o ${pkgs}.list ${pkgs}.list
  awk '{if(c++ < 100){s=s " " $0}else{print s;c=0;s=""}};END{print s}' \
    ${pkgs}.list > ${pkgs}.chunks

  if [[ -f ${pkgs}.deplist ]]; then
    rm -f ${pkgs}.deplist
  fi
  while read line; do
    chroot_cmd yum --assumeno ${repos} install ${line} 2>&1 \
      | python ${python_parser} ${pkgs}.deplist
  done < ${pkgs}.chunks

  if [[ ! -f "${pkgs}.deplist" ]]; then
    RETVAL=${pkgs}
    return
  fi

  sort -u -o ${pkgs}.deplist ${pkgs}.deplist

  cat ${pkgs}.deplist | awk '{print $2}' > ${pkgs}.broken
  sort -u -o ${pkgs}.broken ${pkgs}.broken
  >${pkgs}.update
  while read name; do
    chroot_cmd repoquery --qf '%{nevra} %{repoid}' --show-duplicates ${name} > ${pkgs}.1
    >${pkgs}.1.mos
    >${pkgs}.1.centos
    awk -v ofile=${pkgs}.1 -f ${get_latest_packages} ${pkgs}.1
    latest=$(cat ${pkgs}.1.mos ${pkgs}.1.centos | rpmdev-sort | tail -n 1)
    if ! grep -q -E "^${latest}$" ${pkgs}.1.mos ; then
      echo "${name}" >> ${pkgs}.update
    fi
  done < ${pkgs}.broken

  if [[ $(cat ${pkgs}.update | wc -l) -gt 0 ]]; then
    cat ${pkgs}.update > ${pkgs}.deplist
  fi

  echo ''
  echo ''
  resolve_names ${pkgs}.deplist
  apply_blacklist ${RETVAL}.deplist devel name_arch

  >${pkgs}
  local f1 f2 f3
  while read f1 f2 f3; do
    echo " * ${f3} --> ${f1} (${f2})"
    echo ${f1} >> ${pkgs}
    echo ${f3} >> ${pkgs}.broken
  done < ${RETVAL}.deplist
  unset RETVAL

  sort -u -o ${pkgs} ${pkgs}
  if [ -f ${pkgs}.broken ]; then
    sort -u -o ${pkgs}.broken ${pkgs}.broken
  fi

  if [[ $(cat ${pkgs} | wc -l) -gt 0 ]]; then
    RETVAL=${pkgs}
    return 1
  fi
}


mount_iso(){
  local iso=$1

  unset RETVAL

  if [[ -z "${iso}" ]]; then
    die "\$iso not set"
  fi

  echo "=== Mounting ISO '${iso}' ==="

  local mountpoint_path=$(mount | sed -rn "s|^(.*${iso}) on (.+) type .+$|\2|p")
  local mountpoint_chroot='/mnt/iso'
  if [ -z "${mountpoint_path}" ]; then
    echo "ISO ${iso} is not mounted"
    mountpoint_path=${BUILDDIR}${mountpoint_chroot}
    sudo mkdir -p ${mountpoint_path}
    if [[ -f ${iso} ]]; then
      sudo mount ${iso} ${mountpoint_path}
    else
      die "${iso} not found"
    fi
  fi

  cat << EOF | sudo tee ${BUILDDIR}/etc/yum.repos.d/mos-iso.repo
[mos-iso]
name=MOS ISO
baseurl=file://${mountpoint_chroot}
enabled=1
gpgcheck=0
EOF
  echo "ISO mounted at '${mountpoint_path}'"
  echo ''

  RETVAL=${mountpoint_path}
}

# ==============================
# ===== Functions end here =====

unset RETVAL
unset CMDPREFIX

append=false
resolve_srpm=false
pkg_list=$(mktemp)
out_file='updates.tar.gz'
BUILDDIR=$(mktemp -d)
RELEASE='mos9'
blacklist_append=''
blacklist_replace=''
BLACKLIST=$(mktemp)
CONFIG_DIR=/container/config
mode_auto=false


while [[ -n "$1" ]]; do
  case "$1" in
    -a|--append)
      append=true
    ;;
    -A|--auto)
      mode_auto=true
    ;;
    -b|--blacklist-append)
      blacklist_append="$2"
      shift
    ;;
    -B|--blacklist-replace)
      blacklist_replace="$2"
      shift
    ;;
    -o|--out-file)
      out_file=$2
      shift
    ;;
    -i|--iso)
      iso=$2
      shift
    ;;
    -I|--no-iso)
      iso='unset'
    ;;
    -r|--release)
      RELEASE=${2}
      shift
    ;;
    -R|--resolve-srpm)
      resolve_srpm=true
    ;;
    -h|--help)
      usage
      exit 0
    ;;
    -l|--list)
      if [[ -f "$2" ]]; then
        cat "$2" >> ${pkg_list}
      else
        die "File not found '$2'"
      fi
      shift
    ;;
    -f|--file)
      if [[ -f "$2" ]]; then
        # pre-process file list to remove .rpm suffix, arch from package names
        sed -rn 's/(^|.*[[:space:]])([^[:space:]]+(noarch|x86_64))((\.rpm|[[:space:]]).*|$)/\2/p' ${2} >> ${pkg_list}
      else
        die "File not found '$2'"
      fi
      shift
    ;;
    *)
      echo $1 >> ${pkg_list}
    ;;
  esac
  shift
done

out_file=$(readlink -m ${out_file})
yum_vars_sed=$(mktemp)
tmpdir=$(mktemp -d)

case ${RELEASE} in
  mos7)
    iso=${iso:-'MirantisOpenStack-7.0.iso'}
    cat << "EOF" > ${yum_vars_sed}
s/\$releasever/6/
s/\$basearch/x86_64/
EOF
  ;;
  mos8)
    iso=${iso:-'MirantisOpenStack-8.0.iso'}
    cat << "EOF" > ${yum_vars_sed}
s/\$releasever/7/
s/\$basearch/x86_64/
EOF
  ;;
  mos9)
    iso=${iso:-'MirantisOpenStack-9.0.iso'}
    cat << "EOF" > ${yum_vars_sed}
s/\$releasever/7/
s/\$basearch/x86_64/
EOF
  ;;
  *)
    die "Unsupported release '${RELEASE}'"
  ;;
esac

if [[ "${iso}" = 'unset' ]]; then
  unset iso
else
  if [[ -f "${iso}" ]]; then
    iso=$(readlink -e ${iso})
  else
    die "ISO file '${iso}' not found."
  fi
fi


if [[ ! -d ${CONFIG_DIR}/${RELEASE}/yum.conf.d ]]; then
  die "Yum config template '${CONFIG_DIR}/${RELEASE}/yum.conf.d' not found"
fi


mkdir -p ${BUILDDIR}/tmp/yum.conf.d/yum.repos.d
mkdir -p ${BUILDDIR}/etc/yum.repos.d

cp ${CONFIG_DIR}/${RELEASE}/yum.conf.d/yum.conf ${BUILDDIR}/tmp/yum.conf.d/
cat << EOF >> ${BUILDDIR}/tmp/yum.conf.d/yum.conf
cachedir=${BUILDDIR}/tmp/cache
reposdir=${BUILDDIR}/tmp/yum.conf.d/yum.repos.d
EOF

if [[ -n "${iso}" ]]; then
  mount_iso ${iso}

  cat << EOF > ${BUILDDIR}/tmp/yum.conf.d/yum.repos.d/mos-iso.repo
[mos-iso]
name=MOS ISO
baseurl=file://${BUILDDIR}/mnt/iso
enabled=1
gpgcheck=0
EOF
fi

chroot_setup


echo "=== Updating from MOS repos  ==="
sudo cp ${CONFIG_DIR}/${RELEASE}/yum.conf.d/yum.repos.d/mos.repo ${BUILDDIR}/etc/yum.repos.d/
chroot_cmd yum update -y
chroot_cmd yum install -y centos-release
chroot_cmd yum makecache
echo ''


echo "=== List available yum repositories ==="
chroot_cmd yum repolist
echo ''


echo "=== Creating rpm repository ==="
echo "Repo path: ${BUILDDIR}/tmp/local.repo.d"
mkdir -p ${BUILDDIR}/tmp/local.repo.d/Packages
if $append && [ -f ${out_file} ]; then
  echo "Unpacking '${out_file}' to append packages later"
  tar -xzvf ${out_file} -C ${BUILDDIR}/tmp/local.repo.d
fi
echo "Done"
echo ''
rebuild_local_repo


repolist='local mos-os mos-security mos-updates'
if [[ -n "${iso}" ]]; then
  repolist="${repolist} mos-iso"
fi


if ${mode_auto}; then
  get_upstream_packages ${pkg_list}.tmp ${repolist}
  get_updated_packages ${pkg_list}.tmp ${pkg_list}
fi


# Set RETVAL to pkg_list since no function returned RETVAL yet
resolve_names ${pkg_list}
if ${resolve_srpm}; then
  resolve_srpm_packages ${RETVAL}
  apply_blacklist ${RETVAL} devel name_arch
  merge_lists ${RETVAL} ${RETVAL}.in
fi
download_packages ${RETVAL}
rebuild_local_repo


repo_broken=1
pkgs_broken=0
while [[ ${repo_broken} -gt 0 ]]; do
  if [[ ${repo_broken} -gt 5 ]]; then
    die "Failed to get repositories consistent in 5 iterations"
  fi
  echo '=== Running repository verification test ==='
  if verify_repo_integrity ${repolist}; then
    echo 'Looks good'
    repo_broken=0
  else
    pkgs_broken=1
  fi
  echo ''
  while [[ ${pkgs_broken} -gt 0 ]]; do
    if [[ ${pkgs_broken} -gt 5 ]]; then
      die "Failed to download missed dependencies in 5 iterations"
    fi
    # Assign RETVAL to pkgs as I need it later to verify broken packages
    pkgs=${RETVAL}
    #resolve_names ${pkgs}
    if ${resolve_srpm}; then
      resolve_srpm_packages ${RETVAL}
      apply_blacklist ${RETVAL} devel name_arch
      merge_lists ${RETVAL} ${RETVAL}.in
    fi
    download_packages ${RETVAL}
    rebuild_local_repo
    echo "=== Checking packages ==="
    if verify_repo_integrity -l ${pkgs}.broken ${repolist}; then
      echo 'Looks good'
      pkgs_broken=0
    else
      ((pkgs_broken++))
    fi
    echo ''
  done
done


echo '=== Compressing repository ==='
pushd ${BUILDDIR}/tmp/local.repo.d
tar -czvf ${out_file} .
count=$(find Packages -name '*.rpm' | wc -l)
popd
echo '---'
echo "${count} package(s) compressed."
echo ''

if [[ -f ${logfile} ]]; then
  mv ${logfile} ${out_file}.log.txt
fi

